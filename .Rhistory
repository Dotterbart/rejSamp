?rejSamp
devtools::document()
devtools::load_all()
?rejSamp
test <- function(x) x^2
rejSamp(test, 10, -50, 50)
rejSamp(test, 10, -500, 500)
rejSamp(test, 10, -5000, 5000)
?dbinom
test3 = function(x) dbinom(x, 10, 0.5)
r3 = function(x) rbinom(1, 10, 0.5)
rejSamp(test3, n = 10, min = 0, max = 10)
rejsamp(test, 10, 0, 10, test3, r3)
rejSamp(test, 10, 0, 10, test3, r3)
x = 1
is.null(x)
!is.numm(x)
!is.null(x)
test3(0.7)
devtools::document()
devtools::load_all()
?rejSamp
install.packages("checkmate")
library(checkmate)
?"checkmate"
library(checkmate)
?checkmate
?print
print("min and max have been swapped")
println("min and max have been swapped")
printline("min and max have been swapped")
?sprintf
sprintf("min and max have been swapped")
warning("min and max have been swapped")
1e-6
devtools::document()
devtools::load_all()
?rejSamp
test <- function(x) x^2
rejSamp(test, 10, -5000, 5000)
devtools::load_all()
?rejSamp
rejSamp(test, 10, -5000, 5000)
rejSamp(test, 0, -5000, 5000)
rejSamp(test, 1.5, -5000, 5000)
rejSamp(test, 2, -5000, 5000)
rejSamp(test, 10, -5000, 5000)
rejSamp(test, 10, -Inf, 5000)
xxx <- "Hello"
xxx
rejSamp(xxx, 10, -5000, 5000)
rejSamp(test(5), 10, -5000, 5000)
rejSamp(test, 10, -5000, 5000, test, runif(1,1,10), 2)
rejSamp(test, 10, -5000, 5000, test, function(x) runif(1,1,10), 2)
rejSamp(test, 10, -5000, 5000, test, function(x) runif(1,1,10), 0)
rejSamp(test, 10, -5000, 5000, test, function(x) runif(1,1,10), 1e-7)
rejSamp(test, 10, -5000, 5000, xxx, function(x) runif(1,1,10), 2)
devtools::load_all()
rejSamp(test, 10, -5, 5, test, function(x) runif(1,1,10), 2)
rejSamp(test, 10, -5000, 5000, test, function(x) runif(2,1,10), 2)
rejSamp(test, 10, -5000, 5000, test, function(x) runif(7,1,10), 2)
?testthat
library(testthat)
?testthat
fun = function(x) (x + 1)^2
fun1 = function(x) x^2
fun2 = function(x) x^3 + 1
fun3 = function() runif(1, 1, 5)
testthat("rejSamp", {
expect_that(rejsamp(fun1, 5, 1, 5, fun2, fun3), is.numeric())
})
library(testthat)
?"testthat"
?test-checl
?test-check
?test_check
devtools::load_all()
test_check("rejSamp")
test_check
devtools::load_all()
test_check("rejSamp")
devtools::document()
devtools::load_all()
?rejSamp
test_check("rejSamp")
?expect_error
expect_error(rejSamp(test, 0, -5000, 5000))
?expect_warning
fun1 = function(x) x
fun2 = function(x) dunif(x, 1, 5)
fun3 = function() runif(1, 1, 5)
xxx <- "Hello"
expect_error(rejSamp(test, 0, -5000, 5000))
expect_error(rejSamp(test, 2.5, -5000, 5000))
expect_error(rejSamp(test, 10, -Inf, 5000))
expect_error(rejSamp(xxx, 10, -5000, 5000))
expect_warning(rejSamp(test, 0, 5000, -5000))
expect_warning(rejSamp(test, 10, 5000, -5000))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 0))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, 3, 20))
expect_error(rejSamp(test, 1, -5000, 5000))
expect_true(is.numeric(rejSamp(test, 10, -5000, 5000)))
expect_true(is.numeric(rejSamp(fun1, 10, 1, 5, fun2, fun3, 20)))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 0))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, 3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, function(x) runif(7,1,10), 20))
function(x) runif(7, 1, 5)
fun4 = function() runif(7, 1, 5)
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun4, 20))
devtools::load_all()
test_check("rejSamp")
test_check("rejSamp")
devtools::load_all()
?rep
library(testthat)
library(checkmate)
devtools::load_all()
test_that("rejSamp", {
expect_true(is.numeric(rejSamp(fun1, 10, -5000, 5000)))
expect_error(rejSamp(fun1, 0, -5000, 5000))
expect_error(rejSamp(fun1, 2.5, -5000, 5000))
expect_error(rejSamp(fun1, 10, -Inf, 5000))
expect_error(rejSamp(xxx, 10, -5000, 5000))
expect_warning(rejSamp(fun1, 10, 5000, -5000))
expect_true(is.numeric(rejSamp(fun1, 10, 1, 5, fun2, fun3, 20)))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 1e-7))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun4, 20))
})
fun1 = function(x) x
fun2 = function(x) dunif(x, 1, 5)
fun3 = function() runif(1, 1, 5)
fun4 = function() runif(7, 1, 5)
xxx <- "Hello"
test_that("rejSamp", {
expect_true(is.numeric(rejSamp(fun1, 10, -5000, 5000)))
expect_error(rejSamp(fun1, 0, -5000, 5000))
expect_error(rejSamp(fun1, 2.5, -5000, 5000))
expect_error(rejSamp(fun1, 10, -Inf, 5000))
expect_error(rejSamp(xxx, 10, -5000, 5000))
expect_warning(rejSamp(fun1, 10, 5000, -5000))
expect_true(is.numeric(rejSamp(fun1, 10, 1, 5, fun2, fun3, 20)))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 1e-7))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun4, 20))
})
rejSamp <- function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {
checkmate::assertFunction(f)
checkmate::assertCount(n, positive = TRUE)
if (!is.null(g)) {
checkmate::assertFunction(g)
checkmate::assertFunction(rg)
checkmate::assertNumber(rg(), lower = min, upper = max)
}
checkmate::assertNumber(min, finite = TRUE)
checkmate::assertNumber(max, finite = TRUE)
checkmate::assertNumber(g.factor, lower = 1e-6, finite = TRUE)
if (min > max) {
temp = max
max = min
min = temp
warning("min and max have been swapped")
}
numbers = c()
if (is.null(g)) {
g = function(x) dunif(x, min, max)
rg = function(x) runif(1, min, max)
g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective
}
rej.helper = function() {
j = TRUE
while(j) {
y = rg()
z = runif(1)
if (f(y) > g.factor * z * g(y)) {
return(y)
}
}
}
return(replicate(n, rej.helper()))
}
test_that("rejSamp", {
expect_true(is.numeric(rejSamp(fun1, 10, -5000, 5000)))
expect_error(rejSamp(fun1, 0, -5000, 5000))
expect_error(rejSamp(fun1, 2.5, -5000, 5000))
expect_error(rejSamp(fun1, 10, -Inf, 5000))
expect_error(rejSamp(xxx, 10, -5000, 5000))
expect_warning(rejSamp(fun1, 10, 5000, -5000))
expect_true(is.numeric(rejSamp(fun1, 10, 1, 5, fun2, fun3, 20)))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 1e-7))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun4, 20))
})
te = rejsamp(test, 100000)
te = rejSamp(test, 100000)
test
test = function(x) x^2
te = rejSamp(test, 100000)
hist (te)
curve(test)
hist (te)
lines(curve(test))
library(parallelMap)
?parallelMap
rejSamp <- function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {
checkmate::assertFunction(f)
checkmate::assertCount(n, positive = TRUE)
if (!is.null(g)) {
checkmate::assertFunction(g)
checkmate::assertFunction(rg)
checkmate::assertNumber(rg(), lower = min, upper = max)
}
checkmate::assertNumber(min, finite = TRUE)
checkmate::assertNumber(max, finite = TRUE)
checkmate::assertNumber(g.factor, lower = 1e-6, finite = TRUE)
if (min > max) {
temp = max
max = min
min = temp
warning("min and max have been swapped")
}
numbers = c()
if (is.null(g)) {
g = function(x) dunif(x, min, max)
rg = function(x) runif(1, min, max)
g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective
}
rej.helper = function() {
j = TRUE
while(j) {
y = rg()
z = runif(1)
if (f(y) > g.factor * z * g(y)) {
return(y)
}
}
}
return(parallelMap(n, rej.helper()))
}
test_that("rejSamp", {
expect_true(is.numeric(rejSamp(fun1, 10, -5000, 5000)))
expect_error(rejSamp(fun1, 0, -5000, 5000))
expect_error(rejSamp(fun1, 2.5, -5000, 5000))
expect_error(rejSamp(fun1, 10, -Inf, 5000))
expect_error(rejSamp(xxx, 10, -5000, 5000))
expect_warning(rejSamp(fun1, 10, 5000, -5000))
expect_true(is.numeric(rejSamp(fun1, 10, 1, 5, fun2, fun3, 20)))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 1e-7))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun4, 20))
})
fun1 = function(x) x
fun2 = function(x) dunif(x, 1, 5)
fun3 = function() runif(1, 1, 5)
fun4 = function() runif(7, 1, 5)
xxx <- "Hello"
test_that("rejSamp", {
expect_true(is.numeric(rejSamp(fun1, 10, -5000, 5000)))
expect_error(rejSamp(fun1, 0, -5000, 5000))
expect_error(rejSamp(fun1, 2.5, -5000, 5000))
expect_error(rejSamp(fun1, 10, -Inf, 5000))
expect_error(rejSamp(xxx, 10, -5000, 5000))
expect_warning(rejSamp(fun1, 10, 5000, -5000))
expect_true(is.numeric(rejSamp(fun1, 10, 1, 5, fun2, fun3, 20)))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun3, 1e-7))
expect_error(rejsamp(fun1, 10, 1, 5, xxx, fun3, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, xxx, 20))
expect_error(rejsamp(fun1, 10, 1, 5, fun2, fun4, 20))
})
rejsamp(test,2)
rejSamp(test,2)
rejSamp <- function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {
checkmate::assertFunction(f)
checkmate::assertCount(n, positive = TRUE)
if (!is.null(g)) {
checkmate::assertFunction(g)
checkmate::assertFunction(rg)
checkmate::assertNumber(rg(), lower = min, upper = max)
}
checkmate::assertNumber(min, finite = TRUE)
checkmate::assertNumber(max, finite = TRUE)
checkmate::assertNumber(g.factor, lower = 1e-6, finite = TRUE)
if (min > max) {
temp = max
max = min
min = temp
warning("min and max have been swapped")
}
numbers = c()
if (is.null(g)) {
g = function(x) dunif(x, min, max)
rg = function(x) runif(1, min, max)
g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective
}
rej.helper = function() {
j = TRUE
while(j) {
y = rg()
z = runif(1)
if (f(y) > g.factor * z * g(y)) {
return(y)
}
}
}
return(parallelMap(rej.helper(), 1:n))
}
rejSamp(test,2)
parallelStartSocket(2)
rejSamp(test,2)
rejSamp <- function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {
checkmate::assertFunction(f)
checkmate::assertCount(n, positive = TRUE)
if (!is.null(g)) {
checkmate::assertFunction(g)
checkmate::assertFunction(rg)
checkmate::assertNumber(rg(), lower = min, upper = max)
}
checkmate::assertNumber(min, finite = TRUE)
checkmate::assertNumber(max, finite = TRUE)
checkmate::assertNumber(g.factor, lower = 1e-6, finite = TRUE)
if (min > max) {
temp = max
max = min
min = temp
warning("min and max have been swapped")
}
numbers = c()
if (is.null(g)) {
g = function(x) dunif(x, min, max)
rg = function(x) runif(1, min, max)
g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective
}
rej.helper = function() {
j = TRUE
while(j) {
y = rg()
z = runif(1)
if (f(y) > g.factor * z * g(y)) {
return(y)
}
}
}
parallelStatSocket(n)
numbers = parallelMap(rej.helper(), 1:n)
parallelStop()
return(numbers)
#  return(replicate(n, rej.helper()))
}
rejSamp(test, 5)
#' @examples
#' test <- function(x) x^2
#' rejSamp(f = test, n = 10, min = -1, max = 1)
rejSamp <- function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {
checkmate::assertFunction(f)
checkmate::assertCount(n, positive = TRUE)
if (!is.null(g)) {
checkmate::assertFunction(g)
checkmate::assertFunction(rg)
checkmate::assertNumber(rg(), lower = min, upper = max)
}
checkmate::assertNumber(min, finite = TRUE)
checkmate::assertNumber(max, finite = TRUE)
checkmate::assertNumber(g.factor, lower = 1e-6, finite = TRUE)
if (min > max) {
temp = max
max = min
min = temp
warning("min and max have been swapped")
}
numbers = c()
if (is.null(g)) {
g = function(x) dunif(x, min, max)
rg = function(x) runif(1, min, max)
g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective
}
rej.helper = function() {
j = TRUE
while(j) {
y = rg()
z = runif(1)
if (f(y) > g.factor * z * g(y)) {
return(y)
}
}
}
parallelStartSocket(n)
numbers = parallelMap(rej.helper(), 1:n)
parallelStop()
return(numbers)
#  return(replicate(n, rej.helper()))
}
rejSamp(test, 5)
?curve
y = curve(x^2)
hist(te)
lines(y)
?hist
hist(te, freq = FALSE)
lines(y)
lines(2 * y)
y = curve(2 * x^2)
hist(te, freq = FALSE)
lines(y)
te = rejSamp(test, 100000, -1, 1)
rejSamp <- function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {
checkmate::assertFunction(f)
checkmate::assertCount(n, positive = TRUE)
if (!is.null(g)) {
checkmate::assertFunction(g)
checkmate::assertFunction(rg)
checkmate::assertNumber(rg(), lower = min, upper = max)
}
checkmate::assertNumber(min, finite = TRUE)
checkmate::assertNumber(max, finite = TRUE)
checkmate::assertNumber(g.factor, lower = 1e-6, finite = TRUE)
if (min > max) {
temp = max
max = min
min = temp
warning("min and max have been swapped")
}
numbers = c()
if (is.null(g)) {
g = function(x) dunif(x, min, max)
rg = function(x) runif(1, min, max)
g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective
}
rej.helper = function() {
j = TRUE
while(j) {
y = rg()
z = runif(1)
if (f(y) > g.factor * z * g(y)) {
return(y)
}
}
}
return(replicate(n, rej.helper()))
}
hist(te, freq = FALSE)
te = rejSamp(test, 100000, -1, 1)
warnings()
devtools::load_all()
test <- function(x) x^2
y = curve(2 * x^2)
te = rejSamp(test, 100000, -1, 1)
hist(te, freq = FALSE)
lines(y)
y = curve(x^2)
hist(te, freq = FALSE)
y = curve(x^2)
lines(y)
y = curve(x^2, -1, 1)
hist(te, freq = FALSE)
lines(y, -1, 1)
lines(y)
test2 = function(x) x
hist(t2, freq = FALSE)
t2 = rejSamp(test2, 10000)
hist(t2, freq = FALSE)
abline(0, 1)
t2 = rejSamp(test2, 100000, 0, 2)
hist(t2, freq = FALSE)
abline(0, 1)
t2 = rejSamp(test2, 100000, 0, sqrt(2))
hist(t2, freq = FALSE)
abline(0, 1)
test
curve(test)
test3 = function(x) 3*x^3 - 6*x^2 + 5*x + 2
y = curve(test3, -1, 2)
y = curve(test3, 0, 2)
t3 = rejSamp(test3, 100000, 0, 2)
hist(t3, freq = FALSE)
lines(y)
hist(t3)
hist(t3, freq = FALSE, ylim = c(0,6))
lines(y)
test3 = function(x) 3*x^3 - 6*x^2 + 5*x
y = curve(test3, 0, 2)
t3 = rejSamp(test3, 100000, 0, 2)
hist(t3, freq = FALSE, ylim = c(0,6))
lines(y)
hist(t3 * 5, freq = FALSE, ylim = c(0,6))
t3
t3[1]
t3[1] * 5
mean(test3)
?mean
devtools::load_all()
?rejSamp
devtools::document()
sapply
?where
dat = iris
iris
iris[Species = "virginica"]
iris[Species = virginica]
iris[iris$Species = "virginica"]
iris$Species = "virginica"
iris
iris[iris$Species == "virginica"]
iris[iris$Species == "virginica",]
iris[iris$Species == "virginica",3]
