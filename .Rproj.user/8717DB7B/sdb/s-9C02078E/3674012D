{
    "contents" : "#' Generate random numbers by rejection sampling\n#'\n#' @param f [\\code{function}]\\cr\n#'  Function to be interpreted as probability density function.\n#' @param n  [\\code{integer(1)}]\\cr\n#'  Amount of random numbers to be generated. Default is 1.\n#' @param min [\\code{numeric(1)}]\\cr\n#' @param max [\\code{numeric(1)}]\\cr\n#'  Interval the generated random numbers are from. Default is (0, 1).\n#' @param g [\\code{function}]\\cr\n#'  Probability density function of the instrumental distribution.\n#' @param rg  [\\code{function}]\\cr\n#'  Function that generates random numbers from the instrumental distribution.\n#' @param g.factor [\\code{numeric(1)}]\\cr\n#'  Factor for \\code{g}. Default is 1.\n#' @return\n#'  \\code{n} Random numbers from the function \\code{f} interpreted as probality density function on the interval (\\code{min}, \\code{max}).\n#' @details\n#' If no instrumental distribution is specified, the uniform distribution is used.\n#'\n#' The call \\code{g}(x) should return the probability of the realisation x for the instrumental distribution \\code{g}.\n#'\n#' The choice of \\code{g.factor} should guarantee \\code{f}(x) < \\code{g.factor} * \\code{g}(x).\n#' @examples\n#' test <- function(x) x^2\n#' rejSamp(f = test, n = 10, min = -1, max = 1)\n\nrejSamp = function(f, n = 1, min = 0, max = 1, g = NULL, rg = NULL, g.factor = 1) {\n  checkmate::assertFunction(f)\n  checkmate::assertCount(n, positive = TRUE)\n  if (!is.null(g)) {\n    assertFunction(g)\n    assertFunction(rg)\n    assertNumber(rg(), lower = min, upper = max)\n  }\n  assertNumber(min, finite = TRUE)\n  assertNumber(max, finite = TRUE)\n  assertNumber(g.factor, lower = 1e-6, finite = TRUE)\n  if (min > max) {\n    temp = max\n    max = min\n    min = temp\n    warning(\"min and max have been swapped\")\n  }\n  if (is.null(g)) {\n    g = function(x) dunif(x, min, max)\n    rg = function(x) runif(1, min, max)\n    g.factor = (max - min) * optimize(f, interval = c(min, max), maximum = TRUE)$objective\n  }\n  rej.helper = function() {\n    j = TRUE\n    while(j) {\n      y = rg()\n      z = runif(1)\n      if (f(y) > g.factor * z * g(y)) {\n        return(y)\n      }\n    }\n  }\n  return(replicate(n, rej.helper()))\n}\n\n\n",
    "created" : 1445507731979.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2237002404",
    "id" : "3674012D",
    "lastKnownWriteTime" : 1447252242,
    "path" : "~/GitHub/rejSamp/R/rejSamp.R",
    "project_path" : "R/rejSamp.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}